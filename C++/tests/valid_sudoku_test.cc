#include "../src/valid_sudoku.hpp"
#include <gtest/gtest.h>

class ValidSudokuTest : public testing::Test {
protected:
  Solution s;
};

TEST_F(ValidSudokuTest, case1) {
  vector<vector<char>> board = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
  bool expected = true;

  bool actual = s.isValidSudoku(board);

  EXPECT_EQ(actual, expected);
}

TEST_F(ValidSudokuTest, case2) {
  vector<vector<char>> board = {{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
  bool expected = false;

  bool actual = s.isValidSudoku(board);

  EXPECT_EQ(actual, expected);
}

TEST_F(ValidSudokuTest, case3) {
  vector<vector<char>> board = {{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
                                {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
                                {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
                                {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

  bool expected = false;

  bool actual = s.isValidSudoku(board);

  EXPECT_EQ(actual, expected);
}
